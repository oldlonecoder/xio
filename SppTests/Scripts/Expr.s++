
//Program Test;  \
//Amu ::Test;    -> Program Test; === Amu ::Test;
// ...

//..            A = [Expression::DoSomethingWith expr: cos(1+1)];
//          === A = Expression::DoSomethingWith(1+1);
//          === A = Expression::DoSomethingWith(expr: cos(1+1));
//          === A = Expression::DoSomethingWith cos(1 + 1);

//

/*
           Idée de syntaxe ( alternative à switch-case ) pour l'interpreteur XIO :
           ---------------------------------------------------------------------

        [Game ::Init]->Success{
            Success code
            //...
        }->Warning[InvalidValue]{ // Specific warning
            Develop ->[Result] message/Analyse
            //...
        }->Error[NotFound]{
            Develop ->[Result] message/Analyse
            //...
        }->Error[Syntax]{
            Develop ->[Result] message/Analyse
            //...
        }->Error[]{  // All other errors
            Develop ->[Result] message/Analyse
            //...
        }->Fatal[SegFault,Abort,UserBreak]{
            Develop ->[Result] message/Analyse
        }->...

           ---------------------------------------------------------------------


private:
        Unit Calculus;
        //...
        Result = atan sin .5;

        //...
        // ::ProgramName :
        R = Calculus::Result;



*/

/*******************************************************************
*   Testing arithmetic expression.                                 *
*   Bloc Comment                                                   *
********************************************************************/


// C++ style line comment;
// At global scope it is ok to evaluate an expression; Therefore no instruction
// and control flow are allowed at the global/Unit scope/context.
// if x = 42/4 + 5(3+4*3/5+34) - 42 + π d = 12; else {...; }
// Means:
// ...
/*----------------Bloc  comment ... --------------------------------*/
x = 42/4 + 5(3+4*3/5+34) - 42 + π d = 12; // This is the actual code source! lol
//-------------------------------^---------------------------------------
//                               |
//                               --- > Intentionally Invalidate syntax in arithmetic expression ( context ).
//


        [Game Init]->Success{
            Success code
            //...
        }->Warning[InvalidValue]{ // Specific warning
            //Develop ->[Result] message/Analyse
            //...
        }->Error[NotFound]{
            //Develop ->[Result] message/Analyse
            //...
        }->Error[Syntax]{
            //Develop ->[Result] message/Analyse
            //...
        }->Error[]{  // All other errors
            //Develop ->[Result] message/Analyse
            //...
        }->Fatal[SegFault,Abort,UserBreak]{
            //Develop ->[Result] message/Analyse
        }->...{
            //Default Develop ...
        }
